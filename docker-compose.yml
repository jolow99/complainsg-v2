services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: complainsg-postgres
    # Production: Uncomment the restart policy below
    # restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # No external port mapping - only accessible within Docker network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      # Production: Use these healthcheck settings instead
      # interval: 30s
      # timeout: 10s
      # retries: 3
      # start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: complainsg-backend
    # Production: Uncomment the restart policy below
    # restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=${PYTHONPATH}
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL}
    depends_on:
      postgres:
        condition: service_healthy
    # Development: Volume mount for hot reload
    volumes:
      - ./backend:/app
    # Development: Use dev server
    command: ["uv", "run", "fastapi", "dev", "main.py", "--host", "${BACKEND_HOST}", "--port", "8000"]
    # Production: Use production server instead
    # command: ["uv", "run", "fastapi", "run", "main.py", "--host", "0.0.0.0", "--port", "8000"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: complainsg-frontend
    # Production: Uncomment the restart policy below
    # restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:3000"
    # Development: Volume mounts for hot reload
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - NODE_ENV=${NODE_ENV}
      - CI=true
      # Production: Set NODE_ENV to production
      # - NODE_ENV=production
    # Development: Use dev server
    command: ["sh", "-c", "pnpm install && pnpm run dev --host 0.0.0.0 --port 3000"]
    # Production: Build and serve production build
    # command: ["sh", "-c", "pnpm install && pnpm run build && pnpm run preview --host 0.0.0.0 --port 3000"]

volumes:
  postgres_data:
  frontend_node_modules: